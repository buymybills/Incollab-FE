name: Docker CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    types: [opened, synchronize, reopened]

env:
  REGISTRY: docker.io
  IMAGE_NAME: buymybills/incollab-fe

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    # Skip running on PR if it's only a draft
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.draft == false)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        # Only push to Docker Hub on main branch, not on PRs
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: buymybills
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          # Only push on main branch
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: |
            buymybills/incollab-fe:latest
            buymybills/incollab-fe:${{ github.sha }}
          cache-from: type=registry,ref=buymybills/incollab-fe:buildcache
          cache-to: type=registry,ref=buymybills/incollab-fe:buildcache,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    # Only deploy on push to main, not on PRs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Server Setup
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Updating system packages..."
            sudo apt-get update
            
            echo "Installing Docker..."
            if ! command -v docker &> /dev/null; then
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ubuntu
              # Reload group membership
              newgrp docker
            fi
            
            echo "Installing Nginx..."
            sudo apt-get install -y nginx
            
            # Create Nginx directories if they don't exist
            sudo mkdir -p /etc/nginx/sites-available
            sudo mkdir -p /etc/nginx/sites-enabled

      - name: Setup Nginx Configuration
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Create Nginx configuration with mobile-only access
            echo 'map $http_user_agent $is_mobile {
                default 0;
                ~*(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge\ |maemo|midp|mmp|mobile.+firefox|netfront|opera\ m(ob|in)i|palm(\ os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows\ ce|xda|xiino|android|ipad|playbook|silk 1;
            }
            
            map $uri $is_allowed_page {
                default 0;
                ~^/terms 1;
                ~^/privacy-policy 1;
            }
            
            server {
                listen 80;
                server_name collabkaroo.buymybills.in;
                
                # Access control based on device type and page
                if ($is_mobile = 0) {
                    set $mobile_restricted "T";
                }
                if ($is_allowed_page = 0) {
                    set $mobile_restricted "${mobile_restricted}R";
                }
                
                if ($mobile_restricted = "TR") {
                    return 403;
                }
                
                # Gzip compression
                gzip on;
                gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
                
                location / {
                    proxy_pass http://localhost:3000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
                
                # Custom error page for mobile restriction
                error_page 403 /403.html;
                location = /403.html {
                    return 403 '"'"'<!DOCTYPE html>
                    <html>
                    <head>
                        <title>Mobile App Only</title>
                        <style>
                            body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
                            .container { max-width: 600px; margin: 0 auto; text-align: center; }
                            .button { display: inline-block; padding: 10px 20px; background: #007bff; color: white; text-decoration: none; border-radius: 5px; margin-top: 20px; }
                        </style>
                    </head>
                    <body>
                        <div class="container">
                            <h1>Mobile App Only</h1>
                            <p>This application is designed for mobile devices only. Please access it through our mobile app or visit from a mobile device.</p>
                            <p>You can still access our:</p>
                            <p><a href="/terms">Terms and Conditions</a> | <a href="/privacy-policy">Privacy Policy</a></p>
                        </div>
                    </body>
                    </html>'"'"';
                }
            }' | sudo tee /etc/nginx/sites-available/incollab-fe
            
            # Remove existing symlink if it exists
            sudo rm -f /etc/nginx/sites-enabled/incollab-fe
            
            # Create new symlink
            sudo ln -s /etc/nginx/sites-available/incollab-fe /etc/nginx/sites-enabled/incollab-fe
            
            # Remove default config if it exists
            sudo rm -f /etc/nginx/sites-enabled/default
            
            # Test and reload Nginx
            sudo nginx -t && sudo systemctl restart nginx

      - name: Deploy Container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Stop and remove existing container
            docker stop incollab-fe || true
            docker rm incollab-fe || true
            
            # Pull and run new container
            docker pull buymybills/incollab-fe:latest
            docker run -d \
              --name incollab-fe \
              --restart unless-stopped \
              -p 3000:3000 \
              -e NODE_ENV=production \
              -e HOSTNAME="0.0.0.0" \
              buymybills/incollab-fe:latest

      - name: Verify Deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Check if container is running
            if ! docker ps | grep -q incollab-fe; then
              echo "Container is not running!"
              exit 1
            fi
            
            # Check container health
            if [ "$(docker inspect -f '{{.State.Status}}' incollab-fe)" != "running" ]; then
              echo "Container is not healthy!"
              exit 1
            fi
            
            echo "Deployment verified successfully!"
            # Pull the latest image
            sudo docker pull buymybills/incollab-fe:latest
            
            # Stop and remove existing container
            sudo docker stop incollab-fe || true
            sudo docker rm incollab-fe || true
            
            # Run new container
            sudo docker run -d \
              --name incollab-fe \
              --restart unless-stopped \
              -p 3000:3000 \
              buymybills/incollab-fe:latest
            
            # Cleanup old images
            sudo docker system prune -f